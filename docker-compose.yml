version: "2.2"

volumes:
  mongodb_data_container:
    driver: local 
  pgdata:
    driver: local
  metadata_data: {}
  middle_var: {}
  historical_var: {}
  broker_var: {}
  coordinator_var: {}
  router_var: {}

   
services:
  postgresuser:
    image: "postgres:11"
    volumes:
      - ./pgdata/db:/var/lib/postgresql/data
    ports:
      - "5433:5432"
    restart: always
    environment:
      - POSTGRES_USER=quanghuy
      - POSTGRES_PASSWORD=12345678  
      - POSTGRES_DB=montoring
    env_file:
      - ./nginxsite/.env
    networks:
      - backend

  mongo:
    image: "mongo:latest"
    volumes:
      - ./mongodb_data_container:/data/db
    ports:
      - "27018:27017"
    restart: always
    environment:
      - MONGO_INITDB_ROOT_USERNAME=quanghuy
      - MONGO_INITDB_ROOT_PASSWORD=12345678
      - MONGO_INITDB_DATABASE=app
    env_file:
      - ./nginxsite/.env
    networks:
      - backend
  
  collectors:
    build:
      context: ./collectors
      dockerfile: Dockerfile.Web
    restart: always
    volumes:
      - ./collectors:/app
      - ./dataStore:/app/dataStore
    ports:
      - "8002:8000"
    depends_on:
      - postgresuser
    networks:
      - backend
    env_file:
      - ./collectors/.env
  
  processors:
    image: processors
    restart: always
    volumes:
      - ./dataStore:/app/dataStore
      - ./processors:/app
    networks:
      - backend
    depends_on:
      - kafka
    env_file:
      - ./processors/.env
    
  nginxsite:
    build:
      context: ./nginxsite
      dockerfile: Dockerfile.Web
    restart: always
    volumes:
      - ./nginxsite:/app
    ports:
      - "8001:8001"
    depends_on:
      - postgresuser
      - mongo
      - broker
    networks:
      - backend
    env_file:
      - ./nginxsite/.env
    
  postgres:
    container_name: postgres
    image: postgres:latest
    volumes:
      - ./metadata_data:/var/lib/postgresql/data
    environment:
      - POSTGRES_PASSWORD=FoolishPassword
      - POSTGRES_USER=druid
      - POSTGRES_DB=druid
    networks:
      - backend

  # Need 3.5 or later for container nodes
  zookeeper:
    container_name: zookeeper
    image: zookeeper:3.5
    networks:
      - backend
    environment:
      - ZOO_MY_ID=1

  coordinator:
    image: apache/druid:0.20.2
    container_name: coordinator
    volumes:
      - ./storage:/opt/data
      - ./coordinator_var:/opt/druid/var
    depends_on: 
      - zookeeper
      - postgres
    ports:
      - "8081:8081"
    command:
      - coordinator
    networks:
      - backend
    env_file:
      - environment

  broker:
    image: apache/druid:0.20.2
    container_name: broker
    volumes:
      - ./broker_var:/opt/druid/var
    depends_on: 
      - zookeeper
      - postgres
      - coordinator
    ports:
      - "8082:8082"
    command:
      - broker
    networks:
      - backend
    env_file:
      - environment

  historical:
    image: apache/druid:0.20.2
    container_name: historical
    volumes:
      - ./storage:/opt/data
      - ./historical_var:/opt/druid/var
    depends_on: 
      - zookeeper
      - postgres
      - coordinator
    ports:
      - "8083:8083"
    command:
      - historical
    networks:
      - backend
    env_file:
      - environment

  middlemanager:
    image: apache/druid:0.20.2
    container_name: middlemanager
    volumes:
      - ./storage:/opt/data
      - ./middle_var:/opt/druid/var
    depends_on: 
      - zookeeper
      - postgres
      - coordinator
    ports:
      - "8091:8091"
    command:
      - middleManager
    networks:
      - backend
    env_file:
      - environment

  router:
    image: apache/druid:0.20.2
    container_name: router
    volumes:
      - ./router_var:/opt/druid/var
    depends_on:
      - zookeeper
      - postgres
      - coordinator
    ports:
      - "8888:8888"
    command:
      - router
    networks:
      - backend
    env_file:
      - environment
  
  #kafka
  zookeeper-kafka:
    image: docker.io/bitnami/zookeeper:3
    ports:
      - "7181:2181"
    networks:
      - backend
    environment:
      - ALLOW_ANONYMOUS_LOGIN=yes
  kafka:
    image: docker.io/bitnami/kafka:2
    ports:
      - "7092:9092"
    networks:
      - backend
    environment:
      - KAFKA_CFG_ZOOKEEPER_CONNECT=zookeeper-kafka:2181
      - ALLOW_PLAINTEXT_LISTENER=yes
    depends_on:
      - zookeeper-kafka
  

  
  monitor:
    image: monitor 
    restart: always
    volumes:
      - ./monitoring:/app
    networks:
      - backend
    depends_on:
      - nginxsite
    env_file:
      - ./monitoring/.env 
    ports:
      - "8080:8080"     
  
networks:
  backend:
    driver: bridge
