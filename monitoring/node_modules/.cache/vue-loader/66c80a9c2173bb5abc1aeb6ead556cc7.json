{"remainingRequest":"/home/quanghuy/Desktop/dashboard/montoring/node_modules/vue-loader/lib/index.js??vue-loader-options!/home/quanghuy/Desktop/dashboard/montoring/src/views/Dashboard.vue?vue&type=style&index=0&lang=scss&","dependencies":[{"path":"/home/quanghuy/Desktop/dashboard/montoring/src/views/Dashboard.vue","mtime":1617200462414},{"path":"/home/quanghuy/Desktop/dashboard/montoring/node_modules/css-loader/dist/cjs.js","mtime":1612063424976},{"path":"/home/quanghuy/Desktop/dashboard/montoring/node_modules/vue-loader/lib/loaders/stylePostLoader.js","mtime":1613788894243},{"path":"/home/quanghuy/Desktop/dashboard/montoring/node_modules/postcss-loader/src/index.js","mtime":1612063425289},{"path":"/home/quanghuy/Desktop/dashboard/montoring/node_modules/sass-loader/dist/cjs.js","mtime":1614394343146},{"path":"/home/quanghuy/Desktop/dashboard/montoring/node_modules/cache-loader/dist/cjs.js","mtime":1612063424763},{"path":"/home/quanghuy/Desktop/dashboard/montoring/node_modules/vue-loader/lib/index.js","mtime":1613788894243}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:CgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCi5idXR0b24tdGFibGUgewogIGZvbnQtc2l6ZTogMjVweDsKICB0ZXh0LWFsaWduOiByaWdodDsKfQo="},{"version":3,"sources":["Dashboard.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA+KA;AACA;AACA;AACA","file":"Dashboard.vue","sourceRoot":"src/views","sourcesContent":["<template>\n  <div>\n    <CRow>\n      <CCol md=\"12\">\n        <CCard>\n          <CCardHeader>\n            <div class=\"button-table\">\n              <CButton color=\"dark\" size=\"sm\" @click=\"openFilter = true\">\n                Filter\n                <CIcon name=\"cil-filter\" height=\"15\"></CIcon>\n              </CButton>\n            </div>\n            <CModal\n              title=\"Options\"\n              :closeOnBackdrop=\"false\"\n              :show.sync=\"openFilter\"\n            >\n              <filter-component></filter-component>\n              <div slot=\"footer\" class=\"w-100\">\n                <CButton\n                  color=\"light\"\n                  class=\"ml-1 mr-1 float-right\"\n                  @click=\"openFilter = false\"\n                >\n                  Cancel\n                </CButton>\n                <CButton\n                  color=\"success\"\n                  class=\"ml-1 mr-1 float-right\"\n                  @click=\"filterFuntion\"\n                >\n                  Apply\n                </CButton>\n              </div>\n            </CModal>\n          </CCardHeader>\n\n          <CCardBody>\n            <CDataTable\n              :items=\"data\"\n              :fields=\"fields\"\n              :items-per-page=\"10\"\n              hover\n              sorter\n            >\n              <template #request_method=\"{item}\">\n                <td>\n                  <CBadge :color=\"getBadge(item.request_method)\">\n                    {{ item.request_method }}\n                  </CBadge>\n                </td>\n              </template>\n              <template #show_details=\"{item, index}\">\n                <td class=\"py-2\">\n                  <CButton\n                    color=\"primary\"\n                    variant=\"outline\"\n                    square\n                    size=\"sm\"\n                    @click=\"toggleDetails(item, index)\"\n                  >\n                    {{ Boolean(item._toggled) ? \"Hide\" : \"Show\" }}\n                  </CButton>\n                </td>\n              </template>\n              <template #details=\"{item}\">\n                <CCollapse\n                  :show=\"Boolean(item._toggled)\"\n                  :duration=\"collapseDuration\"\n                >\n                  <detail-request :item=\"item\"></detail-request>\n                </CCollapse>\n              </template>\n            </CDataTable>\n            <pagination\n              :data=\"data\"\n              v-on:pagination-change-page=\"getResultPage\"\n            ></pagination>\n          </CCardBody>\n        </CCard>\n      </CCol>\n    </CRow>\n  </div>\n</template>\n\n<script>\nimport axios from \"axios\";\nimport FilterComponent from \"@/components/FilterComponent\";\nimport DetailRequest from \"@/components/DetailRequest\";\nimport Api from \"@/constants/backendApi\";\nimport { mapGetters } from \"vuex\";\nexport default {\n  name: \"Dashboard\",\n  components: {\n    FilterComponent,\n    DetailRequest\n  },\n  mounted() {\n    this.getData();\n  },\n  data() {\n    return {\n      openFilter: false,\n      collapseDuration: 0,\n      fields: [\n        { key: \"user_id\" },\n        { key: \"url\" },\n        { key: \"request_method\" },\n        { key: \"status\" },\n        {\n          key: \"show_details\",\n          label: \"Detail\",\n          _style: \"width:1%\",\n          sorter: false,\n          filter: false\n        }\n      ],\n      data: {}\n    };\n  },\n\n  computed: {\n    ...mapGetters([\"getMethod\"])\n  },\n  methods: {\n    async getData() {\n      const reponse = await axios.get(Api.DASHBOARD);\n      this.data = reponse.data.map((item, id) => {\n        if (!item.user_id) {\n          item.user_id = \"Anonymous\";\n        }\n        return { ...item, id };\n      });\n      console.log(this.data);\n    },\n    async filterFuntion() {\n      const response = await axios.post(Api.DASHBOARD_FILTER, {\n        request_method: this.getMethod\n      });\n      this.data = response.data.map((item, id) => {\n        if (!item.user_id) {\n          item.user_id = \"Anonymous\";\n        }\n        return { ...item, id };\n      });\n    },\n    getBadge(request_method) {\n      switch (request_method) {\n        case \"GET\":\n          return \"success\";\n        case \"OPTIONS\":\n          return \"secondary\";\n        case \"POST\":\n          return \"warning\";\n        case \"DELETE\":\n          return \"danger\";\n        default:\n          \"primary\";\n      }\n    },\n    toggleDetails(item) {\n      this.$set(this.data[item.id], \"_toggled\", !item._toggled);\n      this.collapseDuration = 300;\n      this.$nextTick(() => {\n        this.collapseDuration = 0;\n      });\n    },\n    getResultPage() {\n      console.log(1);\n    }\n  }\n};\n</script>\n\n<style lang=\"scss\">\n.button-table {\n  font-size: 25px;\n  text-align: right;\n}\n</style>\n"]}]}