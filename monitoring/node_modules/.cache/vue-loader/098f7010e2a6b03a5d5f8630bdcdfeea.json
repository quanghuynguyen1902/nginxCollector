{"remainingRequest":"/app/node_modules/vue-loader/lib/index.js??vue-loader-options!/app/src/components/charts/MethodChart.vue?vue&type=script&lang=js&","dependencies":[{"path":"/app/src/components/charts/MethodChart.vue","mtime":1619597262126},{"path":"/app/node_modules/cache-loader/dist/cjs.js","mtime":1612063424763},{"path":"/app/node_modules/babel-loader/lib/index.js","mtime":1613788894194},{"path":"/app/node_modules/cache-loader/dist/cjs.js","mtime":1612063424763},{"path":"/app/node_modules/vue-loader/lib/index.js","mtime":1613788894243}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:Ly8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KCmltcG9ydCBVc2VyU2VydmljZSBmcm9tICIuLi8uLi9hcGkvdXNlclNlcnZpY2UiOwppbXBvcnQgQXBpIGZyb20gIkAvY29uc3RhbnRzL2JhY2tlbmRBcGkiOwpleHBvcnQgZGVmYXVsdCB7CiAgbmFtZTogIk1ldGhvZENoYXJ0IiwKICBkYXRhKCkgewogICAgcmV0dXJuIHsKICAgICAgdG90YWw6IDAsCiAgICAgIG1ldGhvZHM6IHt9CiAgICB9OwogIH0sCiAgbW91bnRlZCgpIHsKICAgIHRoaXMuZ2V0RGF0YSgpOwogIH0sCiAgbWV0aG9kczogewogICAgYXN5bmMgZ2V0RGF0YSgpIHsKICAgICAgY29uc3QgcmVzcG9uc2UgPSBhd2FpdCBVc2VyU2VydmljZS5nZXRVc2VyQm9hcmQoCiAgICAgICAgYCR7QXBpLlJFUVVFU1RTX0FOQUxZVElDfT91c2VyX2lkPSR7dGhpcy4kcm91dGUucGFyYW1zLnVzZXJfaWR9YAogICAgICApOwogICAgICB0aGlzLnRvdGFsID0gcmVzcG9uc2UuZGF0YS50b3RhbDsKICAgICAgY29uc29sZS5sb2codGhpcy50b3RhbCk7CiAgICAgIHRoaXMubWV0aG9kcyA9IHJlc3BvbnNlLmRhdGEubWV0aG9kczsKICAgIH0KICB9Cn07Cg=="},{"version":3,"sources":["MethodChart.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAwCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"MethodChart.vue","sourceRoot":"src/components/charts","sourcesContent":["<template>\n  <CRow>\n    <CCol sm=\"12\">\n      <CRow>\n        <CCol sm=\"12\">\n          <CCallout color=\"success\">\n            <small class=\"text-muted\">Total request</small><br />\n            <strong class=\"h4\">{{ total }}</strong>\n          </CCallout>\n        </CCol>\n      </CRow>\n      <hr class=\"mt-0\" />\n      <ul class=\"horizontal-bars type-2\">\n        <div\n          v-for=\"(method, index) in methods\"\n          :key=\"index\"\n          class=\"progress-group\"\n        >\n          <div class=\"progress-group-header\">\n            <span class=\"title\">{{ method.name }}</span>\n            <span class=\"ml-auto font-weight-bold\">\n              {{ method.count }}\n              <span class=\"text-muted small\"\n                >{{ (method.count / total).toFixed(2) * 100 }} %\n              </span>\n            </span>\n          </div>\n          <div class=\"progress-group-bars\">\n            <CProgress\n              class=\"progress-xs\"\n              :value=\"(method.count / total).toFixed(2) * 100\"\n              color=\"success\"\n            />\n          </div>\n        </div>\n      </ul>\n    </CCol>\n  </CRow>\n</template>\n<script>\nimport UserService from \"../../api/userService\";\nimport Api from \"@/constants/backendApi\";\nexport default {\n  name: \"MethodChart\",\n  data() {\n    return {\n      total: 0,\n      methods: {}\n    };\n  },\n  mounted() {\n    this.getData();\n  },\n  methods: {\n    async getData() {\n      const response = await UserService.getUserBoard(\n        `${Api.REQUESTS_ANALYTIC}?user_id=${this.$route.params.user_id}`\n      );\n      this.total = response.data.total;\n      console.log(this.total);\n      this.methods = response.data.methods;\n    }\n  }\n};\n</script>\n"]}]}