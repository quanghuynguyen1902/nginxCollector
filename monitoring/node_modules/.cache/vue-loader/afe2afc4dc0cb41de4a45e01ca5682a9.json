{"remainingRequest":"/app/node_modules/vue-loader/lib/index.js??vue-loader-options!/app/src/views/Dashboard.vue?vue&type=style&index=0&lang=css&","dependencies":[{"path":"/app/src/views/Dashboard.vue","mtime":1619520973098},{"path":"/app/node_modules/css-loader/dist/cjs.js","mtime":1612063424976},{"path":"/app/node_modules/vue-loader/lib/loaders/stylePostLoader.js","mtime":1613788894243},{"path":"/app/node_modules/postcss-loader/src/index.js","mtime":1612063425289},{"path":"/app/node_modules/cache-loader/dist/cjs.js","mtime":1612063424763},{"path":"/app/node_modules/vue-loader/lib/index.js","mtime":1613788894243}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:CgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgouYnV0dG9uLXRhYmxlIHsKICBmb250LXNpemU6IDI1cHg7CiAgdGV4dC1hbGlnbjogcmlnaHQ7Cn0K"},{"version":3,"sources":["Dashboard.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAsOA;AACA;AACA;AACA","file":"Dashboard.vue","sourceRoot":"src/views","sourcesContent":["<template>\n  <div>\n    <CRow>\n      <CCol md=\"12\">\n        <CCard>\n          <CCardHeader>\n            <div class=\"button-table\">\n              <CButton color=\"dark\" size=\"sm\" @click=\"openFilter = true\">\n                Filter\n                <CIcon name=\"cil-filter\" height=\"15\"></CIcon>\n              </CButton>\n            </div>\n            <CModal\n              title=\"Options\"\n              :closeOnBackdrop=\"false\"\n              :show.sync=\"openFilter\"\n            >\n              <filter-component></filter-component>\n              <div slot=\"footer\" class=\"w-100\">\n                <CButton\n                  color=\"light\"\n                  class=\"ml-1 mr-1 float-right\"\n                  @click=\"openFilter = false\"\n                >\n                  Cancel\n                </CButton>\n                <CButton\n                  color=\"info\"\n                  class=\"ml-1 mr-1 float-right\"\n                  @click=\"filterFuntion\"\n                >\n                  Apply\n                </CButton>\n              </div>\n            </CModal>\n          </CCardHeader>\n\n          <CCardBody>\n            <CDataTable\n              :items=\"changeData\"\n              :fields=\"fields\"\n              :items-per-page=\"10\"\n              hover\n              sorter\n            >\n              <template #request_method=\"{item}\">\n                <td>\n                  <CBadge :color=\"getBadge(item.request_method)\">\n                    {{ item.request_method }}\n                  </CBadge>\n                </td>\n              </template>\n              <template #show_details=\"{item, index}\">\n                <td class=\"py-2\">\n                  <CButton\n                    color=\"primary\"\n                    variant=\"outline\"\n                    square\n                    size=\"sm\"\n                    @click=\"toggleDetails(item, index)\"\n                  >\n                    {{ Boolean(item._toggled) ? \"Hide\" : \"Show\" }}\n                  </CButton>\n                </td>\n              </template>\n              <template #details=\"{item}\">\n                <CCollapse\n                  :show=\"Boolean(item._toggled)\"\n                  :duration=\"collapseDuration\"\n                >\n                  <detail-request :item=\"item\"></detail-request>\n                </CCollapse>\n              </template>\n            </CDataTable>\n            <CPagination\n              :activePage.sync=\"page\"\n              :pages=\"totalpage\"\n              size=\"sm\"\n              align=\"center\"\n              @update:activePage=\"getResultPage(page)\"\n            />\n          </CCardBody>\n        </CCard>\n      </CCol>\n    </CRow>\n  </div>\n</template>\n\n<script>\nimport FilterComponent from \"@/components/FilterComponent\";\nimport DetailRequest from \"@/components/DetailRequest\";\nimport Api from \"@/constants/backendApi\";\nimport { mapGetters } from \"vuex\";\nimport UserService from \"../api/userService\";\nexport default {\n  name: \"Dashboard\",\n  components: {\n    FilterComponent,\n    DetailRequest\n  },\n  mounted() {\n    if (!this.currentUser) {\n      this.$router.push(\"/login\");\n    }\n    this.getData();\n  },\n  data() {\n    return {\n      openFilter: false,\n      collapseDuration: 0,\n      fields: [\n        { key: \"user_id\" },\n        { key: \"url\" },\n        { key: \"request_method\" },\n        { key: \"status\" },\n        {\n          key: \"show_details\",\n          label: \"Detail\",\n          _style: \"width:1%\",\n          sorter: false,\n          filter: false\n        }\n      ],\n      data: [],\n      page: 1,\n      totalpage: 1\n    };\n  },\n  computed: {\n    ...mapGetters([\"getMethod\", \"getUserId\", \"getUrl\", \"getTime\"]),\n    changeData() {\n      return this.data;\n    },\n    currentUser() {\n      return this.$store.state.auth.user;\n    }\n  },\n  watch: {\n    $route(to, from) {\n      if (to !== from) {\n        location.reload();\n      }\n    }\n  },\n  methods: {\n    async getData() {\n      let response = \"\";\n      this.page = parseInt(this.$route.query.page) || 1;\n      if (this.$route.query.method) {\n        let query = `?method=${this.$route.query.method}&page=${this.page}`;\n        if (this.$route.query.user_id) {\n          this.$store.commit(\"setUserId\", this.$route.query.user_id);\n          query += `&user_id=${this.$route.query.user_id}`;\n        }\n        if (this.$route.query.url) {\n          this.$store.commit(\"setUrl\", this.$route.query.url);\n          query += `&url=${this.$route.query.url}`;\n        }\n        if (this.$route.query.time_from) {\n          this.$store.commit(\"setTime\", this.$route.query.time_from);\n          query += `&time_from=${this.$route.query.time_from}`;\n        }\n        response = await UserService.getUserBoard(\n          `${Api.DASHBOARD_FILTER}` + query\n        );\n      } else {\n        response = await UserService.getUserBoard(\n          `${Api.DASHBOARD}?page=${this.page}`\n        );\n      }\n      this.totalpage = Math.ceil(response.data.counts / 10);\n      this.data = response.data.results.map((item, id) => {\n        if (!item.user_id) {\n          item.user_id = \"Anonymous\";\n        }\n        return { ...item, id };\n      });\n    },\n    filterFuntion() {\n      this.page = 1;\n      const query = {};\n      query.method = this.getMethod;\n      query.page = this.page;\n      if (this.getUserId) {\n        query.user_id = this.getUserId;\n      }\n      if (this.getUrl) {\n        query.url = this.getUrl;\n      }\n      if (this.getTime) {\n        query.time_from = this.getTime;\n      }\n      this.$router.push({\n        name: \"Dashboard\",\n        query: query\n      });\n    },\n    getBadge(request_method) {\n      switch (request_method) {\n        case \"GET\":\n          return \"success\";\n        case \"OPTIONS\":\n          return \"secondary\";\n        case \"POST\":\n          return \"warning\";\n        case \"DELETE\":\n          return \"danger\";\n        default:\n          \"primary\";\n      }\n    },\n    toggleDetails(item) {\n      this.$set(this.data[item.id], \"_toggled\", !item._toggled);\n      this.collapseDuration = 300;\n      this.$nextTick(() => {\n        this.collapseDuration = 0;\n      });\n    },\n    getResultPage(page) {\n      this.page = page;\n      this.$router.push({\n        path: this.$route.fullPath,\n        query: { page: this.page }\n      });\n    }\n  }\n};\n</script>\n\n<style lang=\"css\">\n.button-table {\n  font-size: 25px;\n  text-align: right;\n}\n</style>\n"]}]}