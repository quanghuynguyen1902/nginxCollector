{"remainingRequest":"/home/quanghuy/Desktop/dashboard/monitoring/node_modules/vue-loader/lib/index.js??vue-loader-options!/home/quanghuy/Desktop/dashboard/monitoring/src/components/Notification/DropdownNotification.vue?vue&type=style&index=0&id=5e06ae60&lang=scss&scoped=true&","dependencies":[{"path":"/home/quanghuy/Desktop/dashboard/monitoring/src/components/Notification/DropdownNotification.vue","mtime":1619634806930},{"path":"/home/quanghuy/Desktop/dashboard/monitoring/node_modules/css-loader/dist/cjs.js","mtime":1612063424976},{"path":"/home/quanghuy/Desktop/dashboard/monitoring/node_modules/vue-loader/lib/loaders/stylePostLoader.js","mtime":1613788894243},{"path":"/home/quanghuy/Desktop/dashboard/monitoring/node_modules/postcss-loader/src/index.js","mtime":1612063425289},{"path":"/home/quanghuy/Desktop/dashboard/monitoring/node_modules/sass-loader/dist/cjs.js","mtime":1614394343146},{"path":"/home/quanghuy/Desktop/dashboard/monitoring/node_modules/cache-loader/dist/cjs.js","mtime":1612063424763},{"path":"/home/quanghuy/Desktop/dashboard/monitoring/node_modules/vue-loader/lib/index.js","mtime":1613788894243}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:CgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgouYy1pY29uIHsKICBtYXJnaW4tcmlnaHQ6IDAuM3JlbTsKfQoKLm1hcmstbm90aWZpY2F0aW9uIHsKICBjb2xvcjogIzJmYWZmNzsKICAmOmhvdmVyIHsKICAgIGNvbG9yOiAjMDc3Y2RkOwogIH0KICBjdXJzb3I6IHBvaW50ZXI7Cn0KLmRyb3Bkb3duLW1lbnUuc2hvdyB7CiAgaGVpZ2h0OiA4MDBweDsKfQoubm90aWZpY2F0aW9uIHsKICBwb3NpdGlvbjogcmVsYXRpdmU7CiAgLmJhZGdlIHsKICAgIHBvc2l0aW9uOiBhYnNvbHV0ZTsKICAgIHRvcDogLTVweDsKICAgIHJpZ2h0OiAtNXB4OwogICAgcGFkZGluZzogMnB4IDJweDsKICAgIGJvcmRlci1yYWRpdXM6IDUwJTsKICAgIGJhY2tncm91bmQtY29sb3I6IHJlZDsKICAgIGNvbG9yOiB3aGl0ZTsKICB9Cn0K"},{"version":3,"sources":["DropdownNotification.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAyFA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"DropdownNotification.vue","sourceRoot":"src/components/Notification","sourcesContent":["<template>\n  <CDropdown in-nav class=\"c-header-nav-items\" add-menu-classes=\"pt-0\">\n    <template #toggler>\n      <CHeaderNavLink>\n        <div class=\"notification\" @click=\"getNotification\">\n          <CIcon size=\"lg\" name=\"cil-bell\" />\n          <span v-if=\"notification_count > 0\" class=\"badge\">{{\n            notification_count\n          }}</span>\n        </div>\n      </CHeaderNavLink>\n    </template>\n    <CDropdownHeader\n      tag=\"div\"\n      class=\"text-center h6 d-flex justify-content-between border-bottom m-0\"\n    >\n      <strong>Notification</strong>\n      <div class=\"mark-notification\" @click=\"markAllReaded\">\n        Mark all as read\n      </div>\n    </CDropdownHeader>\n    <div v-for=\"(notify, index) in notifications\" :key=\"index\">\n      <NotificationItem\n        :notify=\"notify\"\n        :allReaded=\"allReaded\"\n      ></NotificationItem>\n    </div>\n  </CDropdown>\n</template>\n\n<script>\nimport Api from \"@/constants/backendApi\";\nimport UserService from \"../../api/userService\";\nimport NotificationItem from \"@/components/Notification/NotificationItem\";\nexport default {\n  name: \"DropdownNotification\",\n  components: {\n    NotificationItem\n  },\n  data() {\n    return {\n      notification_count: 0,\n      notifications: [],\n      allReaded: false,\n      interval: null\n    };\n  },\n  mounted() {\n    this.getNotificationCount();\n    if (!this.interval) {\n      this.interval = setInterval(this.updateNotification, 10000);\n    }\n  },\n  beforeDestroy() {\n    if (this.interval) {\n      clearInterval(this.interval);\n    }\n  },\n  methods: {\n    async getNotificationCount() {\n      const response = await UserService.getUserBoard(Api.NOTIFICATION_COUNT);\n      this.notification_count = response.data[0].quantity;\n    },\n    async getNotification() {\n      this.notification_count = 0;\n      const response = await UserService.getUserBoard(Api.NOTIFICATION);\n      this.notifications = response.data;\n    },\n    async updateNotification() {\n      if (this.$store.state.auth.status.loggedIn) {\n        const count = await UserService.getUserBoard(Api.NOTIFICATION_COUNT);\n        this.notification_count = count.data[0].quantity;\n        if (this.countNotify > 9) {\n          this.notification_count = \"9+\";\n        }\n      }\n    },\n    markAllReaded() {\n      this.allReaded = true;\n      this.notification_count = 0;\n      for (const notify of this.notifications) {\n        UserService.getUserBoard(`${Api.NOTIFICATION}` + `${notify.slug}/`);\n      }\n    }\n  }\n};\n</script>\n\n<style lang=\"scss\" scoped>\n.c-icon {\n  margin-right: 0.3rem;\n}\n\n.mark-notification {\n  color: #2faff7;\n  &:hover {\n    color: #077cdd;\n  }\n  cursor: pointer;\n}\n.dropdown-menu.show {\n  height: 800px;\n}\n.notification {\n  position: relative;\n  .badge {\n    position: absolute;\n    top: -5px;\n    right: -5px;\n    padding: 2px 2px;\n    border-radius: 50%;\n    background-color: red;\n    color: white;\n  }\n}\n</style>\n"]}]}