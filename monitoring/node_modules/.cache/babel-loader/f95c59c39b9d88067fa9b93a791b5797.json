{"remainingRequest":"/app/node_modules/babel-loader/lib/index.js!/app/node_modules/cache-loader/dist/cjs.js??ref--0-0!/app/node_modules/vue-loader/lib/index.js??vue-loader-options!/app/src/components/Notification/DropdownNotification.vue?vue&type=script&lang=js&","dependencies":[{"path":"/app/src/components/Notification/DropdownNotification.vue","mtime":1619634806930},{"path":"/app/node_modules/cache-loader/dist/cjs.js","mtime":1612063424763},{"path":"/app/node_modules/babel-loader/lib/index.js","mtime":1613788894194},{"path":"/app/node_modules/cache-loader/dist/cjs.js","mtime":1612063424763},{"path":"/app/node_modules/vue-loader/lib/index.js","mtime":1613788894243}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:aW1wb3J0IF9jcmVhdGVGb3JPZkl0ZXJhdG9ySGVscGVyIGZyb20gIi9hcHAvbm9kZV9tb2R1bGVzL0B2dWUvYmFiZWwtcHJlc2V0LWFwcC9ub2RlX21vZHVsZXMvQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vY3JlYXRlRm9yT2ZJdGVyYXRvckhlbHBlciI7CmltcG9ydCBfYXN5bmNUb0dlbmVyYXRvciBmcm9tICIvYXBwL25vZGVfbW9kdWxlcy9AdnVlL2JhYmVsLXByZXNldC1hcHAvbm9kZV9tb2R1bGVzL0BiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL2FzeW5jVG9HZW5lcmF0b3IiOwppbXBvcnQgInJlZ2VuZXJhdG9yLXJ1bnRpbWUvcnVudGltZS5qcyI7Ci8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCmltcG9ydCBBcGkgZnJvbSAiQC9jb25zdGFudHMvYmFja2VuZEFwaSI7CmltcG9ydCBVc2VyU2VydmljZSBmcm9tICIuLi8uLi9hcGkvdXNlclNlcnZpY2UiOwppbXBvcnQgTm90aWZpY2F0aW9uSXRlbSBmcm9tICJAL2NvbXBvbmVudHMvTm90aWZpY2F0aW9uL05vdGlmaWNhdGlvbkl0ZW0iOwpleHBvcnQgZGVmYXVsdCB7CiAgbmFtZTogIkRyb3Bkb3duTm90aWZpY2F0aW9uIiwKICBjb21wb25lbnRzOiB7CiAgICBOb3RpZmljYXRpb25JdGVtOiBOb3RpZmljYXRpb25JdGVtCiAgfSwKICBkYXRhOiBmdW5jdGlvbiBkYXRhKCkgewogICAgcmV0dXJuIHsKICAgICAgbm90aWZpY2F0aW9uX2NvdW50OiAwLAogICAgICBub3RpZmljYXRpb25zOiBbXSwKICAgICAgYWxsUmVhZGVkOiBmYWxzZSwKICAgICAgaW50ZXJ2YWw6IG51bGwKICAgIH07CiAgfSwKICBtb3VudGVkOiBmdW5jdGlvbiBtb3VudGVkKCkgewogICAgdGhpcy5nZXROb3RpZmljYXRpb25Db3VudCgpOwoKICAgIGlmICghdGhpcy5pbnRlcnZhbCkgewogICAgICB0aGlzLmludGVydmFsID0gc2V0SW50ZXJ2YWwodGhpcy51cGRhdGVOb3RpZmljYXRpb24sIDEwMDAwKTsKICAgIH0KICB9LAogIGJlZm9yZURlc3Ryb3k6IGZ1bmN0aW9uIGJlZm9yZURlc3Ryb3koKSB7CiAgICBpZiAodGhpcy5pbnRlcnZhbCkgewogICAgICBjbGVhckludGVydmFsKHRoaXMuaW50ZXJ2YWwpOwogICAgfQogIH0sCiAgbWV0aG9kczogewogICAgZ2V0Tm90aWZpY2F0aW9uQ291bnQ6IGZ1bmN0aW9uIGdldE5vdGlmaWNhdGlvbkNvdW50KCkgewogICAgICB2YXIgX3RoaXMgPSB0aGlzOwoKICAgICAgcmV0dXJuIF9hc3luY1RvR2VuZXJhdG9yKCAvKiNfX1BVUkVfXyovcmVnZW5lcmF0b3JSdW50aW1lLm1hcmsoZnVuY3Rpb24gX2NhbGxlZSgpIHsKICAgICAgICB2YXIgcmVzcG9uc2U7CiAgICAgICAgcmV0dXJuIHJlZ2VuZXJhdG9yUnVudGltZS53cmFwKGZ1bmN0aW9uIF9jYWxsZWUkKF9jb250ZXh0KSB7CiAgICAgICAgICB3aGlsZSAoMSkgewogICAgICAgICAgICBzd2l0Y2ggKF9jb250ZXh0LnByZXYgPSBfY29udGV4dC5uZXh0KSB7CiAgICAgICAgICAgICAgY2FzZSAwOgogICAgICAgICAgICAgICAgX2NvbnRleHQubmV4dCA9IDI7CiAgICAgICAgICAgICAgICByZXR1cm4gVXNlclNlcnZpY2UuZ2V0VXNlckJvYXJkKEFwaS5OT1RJRklDQVRJT05fQ09VTlQpOwoKICAgICAgICAgICAgICBjYXNlIDI6CiAgICAgICAgICAgICAgICByZXNwb25zZSA9IF9jb250ZXh0LnNlbnQ7CiAgICAgICAgICAgICAgICBfdGhpcy5ub3RpZmljYXRpb25fY291bnQgPSByZXNwb25zZS5kYXRhWzBdLnF1YW50aXR5OwoKICAgICAgICAgICAgICBjYXNlIDQ6CiAgICAgICAgICAgICAgY2FzZSAiZW5kIjoKICAgICAgICAgICAgICAgIHJldHVybiBfY29udGV4dC5zdG9wKCk7CiAgICAgICAgICAgIH0KICAgICAgICAgIH0KICAgICAgICB9LCBfY2FsbGVlKTsKICAgICAgfSkpKCk7CiAgICB9LAogICAgZ2V0Tm90aWZpY2F0aW9uOiBmdW5jdGlvbiBnZXROb3RpZmljYXRpb24oKSB7CiAgICAgIHZhciBfdGhpczIgPSB0aGlzOwoKICAgICAgcmV0dXJuIF9hc3luY1RvR2VuZXJhdG9yKCAvKiNfX1BVUkVfXyovcmVnZW5lcmF0b3JSdW50aW1lLm1hcmsoZnVuY3Rpb24gX2NhbGxlZTIoKSB7CiAgICAgICAgdmFyIHJlc3BvbnNlOwogICAgICAgIHJldHVybiByZWdlbmVyYXRvclJ1bnRpbWUud3JhcChmdW5jdGlvbiBfY2FsbGVlMiQoX2NvbnRleHQyKSB7CiAgICAgICAgICB3aGlsZSAoMSkgewogICAgICAgICAgICBzd2l0Y2ggKF9jb250ZXh0Mi5wcmV2ID0gX2NvbnRleHQyLm5leHQpIHsKICAgICAgICAgICAgICBjYXNlIDA6CiAgICAgICAgICAgICAgICBfdGhpczIubm90aWZpY2F0aW9uX2NvdW50ID0gMDsKICAgICAgICAgICAgICAgIF9jb250ZXh0Mi5uZXh0ID0gMzsKICAgICAgICAgICAgICAgIHJldHVybiBVc2VyU2VydmljZS5nZXRVc2VyQm9hcmQoQXBpLk5PVElGSUNBVElPTik7CgogICAgICAgICAgICAgIGNhc2UgMzoKICAgICAgICAgICAgICAgIHJlc3BvbnNlID0gX2NvbnRleHQyLnNlbnQ7CiAgICAgICAgICAgICAgICBfdGhpczIubm90aWZpY2F0aW9ucyA9IHJlc3BvbnNlLmRhdGE7CgogICAgICAgICAgICAgIGNhc2UgNToKICAgICAgICAgICAgICBjYXNlICJlbmQiOgogICAgICAgICAgICAgICAgcmV0dXJuIF9jb250ZXh0Mi5zdG9wKCk7CiAgICAgICAgICAgIH0KICAgICAgICAgIH0KICAgICAgICB9LCBfY2FsbGVlMik7CiAgICAgIH0pKSgpOwogICAgfSwKICAgIHVwZGF0ZU5vdGlmaWNhdGlvbjogZnVuY3Rpb24gdXBkYXRlTm90aWZpY2F0aW9uKCkgewogICAgICB2YXIgX3RoaXMzID0gdGhpczsKCiAgICAgIHJldHVybiBfYXN5bmNUb0dlbmVyYXRvciggLyojX19QVVJFX18qL3JlZ2VuZXJhdG9yUnVudGltZS5tYXJrKGZ1bmN0aW9uIF9jYWxsZWUzKCkgewogICAgICAgIHZhciBjb3VudDsKICAgICAgICByZXR1cm4gcmVnZW5lcmF0b3JSdW50aW1lLndyYXAoZnVuY3Rpb24gX2NhbGxlZTMkKF9jb250ZXh0MykgewogICAgICAgICAgd2hpbGUgKDEpIHsKICAgICAgICAgICAgc3dpdGNoIChfY29udGV4dDMucHJldiA9IF9jb250ZXh0My5uZXh0KSB7CiAgICAgICAgICAgICAgY2FzZSAwOgogICAgICAgICAgICAgICAgaWYgKCFfdGhpczMuJHN0b3JlLnN0YXRlLmF1dGguc3RhdHVzLmxvZ2dlZEluKSB7CiAgICAgICAgICAgICAgICAgIF9jb250ZXh0My5uZXh0ID0gNjsKICAgICAgICAgICAgICAgICAgYnJlYWs7CiAgICAgICAgICAgICAgICB9CgogICAgICAgICAgICAgICAgX2NvbnRleHQzLm5leHQgPSAzOwogICAgICAgICAgICAgICAgcmV0dXJuIFVzZXJTZXJ2aWNlLmdldFVzZXJCb2FyZChBcGkuTk9USUZJQ0FUSU9OX0NPVU5UKTsKCiAgICAgICAgICAgICAgY2FzZSAzOgogICAgICAgICAgICAgICAgY291bnQgPSBfY29udGV4dDMuc2VudDsKICAgICAgICAgICAgICAgIF90aGlzMy5ub3RpZmljYXRpb25fY291bnQgPSBjb3VudC5kYXRhWzBdLnF1YW50aXR5OwoKICAgICAgICAgICAgICAgIGlmIChfdGhpczMuY291bnROb3RpZnkgPiA5KSB7CiAgICAgICAgICAgICAgICAgIF90aGlzMy5ub3RpZmljYXRpb25fY291bnQgPSAiOSsiOwogICAgICAgICAgICAgICAgfQoKICAgICAgICAgICAgICBjYXNlIDY6CiAgICAgICAgICAgICAgY2FzZSAiZW5kIjoKICAgICAgICAgICAgICAgIHJldHVybiBfY29udGV4dDMuc3RvcCgpOwogICAgICAgICAgICB9CiAgICAgICAgICB9CiAgICAgICAgfSwgX2NhbGxlZTMpOwogICAgICB9KSkoKTsKICAgIH0sCiAgICBtYXJrQWxsUmVhZGVkOiBmdW5jdGlvbiBtYXJrQWxsUmVhZGVkKCkgewogICAgICB0aGlzLmFsbFJlYWRlZCA9IHRydWU7CiAgICAgIHRoaXMubm90aWZpY2F0aW9uX2NvdW50ID0gMDsKCiAgICAgIHZhciBfaXRlcmF0b3IgPSBfY3JlYXRlRm9yT2ZJdGVyYXRvckhlbHBlcih0aGlzLm5vdGlmaWNhdGlvbnMpLAogICAgICAgICAgX3N0ZXA7CgogICAgICB0cnkgewogICAgICAgIGZvciAoX2l0ZXJhdG9yLnMoKTsgIShfc3RlcCA9IF9pdGVyYXRvci5uKCkpLmRvbmU7KSB7CiAgICAgICAgICB2YXIgbm90aWZ5ID0gX3N0ZXAudmFsdWU7CiAgICAgICAgICBVc2VyU2VydmljZS5nZXRVc2VyQm9hcmQoIiIuY29uY2F0KEFwaS5OT1RJRklDQVRJT04pICsgIiIuY29uY2F0KG5vdGlmeS5zbHVnLCAiLyIpKTsKICAgICAgICB9CiAgICAgIH0gY2F0Y2ggKGVycikgewogICAgICAgIF9pdGVyYXRvci5lKGVycik7CiAgICAgIH0gZmluYWxseSB7CiAgICAgICAgX2l0ZXJhdG9yLmYoKTsKICAgICAgfQogICAgfQogIH0KfTs="},{"version":3,"sources":["DropdownNotification.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA+BA,OAAA,GAAA,MAAA,wBAAA;AACA,OAAA,WAAA,MAAA,uBAAA;AACA,OAAA,gBAAA,MAAA,4CAAA;AACA,eAAA;AACA,EAAA,IAAA,EAAA,sBADA;AAEA,EAAA,UAAA,EAAA;AACA,IAAA,gBAAA,EAAA;AADA,GAFA;AAKA,EAAA,IALA,kBAKA;AACA,WAAA;AACA,MAAA,kBAAA,EAAA,CADA;AAEA,MAAA,aAAA,EAAA,EAFA;AAGA,MAAA,SAAA,EAAA,KAHA;AAIA,MAAA,QAAA,EAAA;AAJA,KAAA;AAMA,GAZA;AAaA,EAAA,OAbA,qBAaA;AACA,SAAA,oBAAA;;AACA,QAAA,CAAA,KAAA,QAAA,EAAA;AACA,WAAA,QAAA,GAAA,WAAA,CAAA,KAAA,kBAAA,EAAA,KAAA,CAAA;AACA;AACA,GAlBA;AAmBA,EAAA,aAnBA,2BAmBA;AACA,QAAA,KAAA,QAAA,EAAA;AACA,MAAA,aAAA,CAAA,KAAA,QAAA,CAAA;AACA;AACA,GAvBA;AAwBA,EAAA,OAAA,EAAA;AACA,IAAA,oBADA,kCACA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,uBACA,WAAA,CAAA,YAAA,CAAA,GAAA,CAAA,kBAAA,CADA;;AAAA;AACA,gBAAA,QADA;AAEA,gBAAA,KAAA,CAAA,kBAAA,GAAA,QAAA,CAAA,IAAA,CAAA,CAAA,EAAA,QAAA;;AAFA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA,KAJA;AAKA,IAAA,eALA,6BAKA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA,gBAAA,MAAA,CAAA,kBAAA,GAAA,CAAA;AADA;AAAA,uBAEA,WAAA,CAAA,YAAA,CAAA,GAAA,CAAA,YAAA,CAFA;;AAAA;AAEA,gBAAA,QAFA;AAGA,gBAAA,MAAA,CAAA,aAAA,GAAA,QAAA,CAAA,IAAA;;AAHA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAIA,KATA;AAUA,IAAA,kBAVA,gCAUA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,qBACA,MAAA,CAAA,MAAA,CAAA,KAAA,CAAA,IAAA,CAAA,MAAA,CAAA,QADA;AAAA;AAAA;AAAA;;AAAA;AAAA,uBAEA,WAAA,CAAA,YAAA,CAAA,GAAA,CAAA,kBAAA,CAFA;;AAAA;AAEA,gBAAA,KAFA;AAGA,gBAAA,MAAA,CAAA,kBAAA,GAAA,KAAA,CAAA,IAAA,CAAA,CAAA,EAAA,QAAA;;AACA,oBAAA,MAAA,CAAA,WAAA,GAAA,CAAA,EAAA;AACA,kBAAA,MAAA,CAAA,kBAAA,GAAA,IAAA;AACA;;AANA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAQA,KAlBA;AAmBA,IAAA,aAnBA,2BAmBA;AACA,WAAA,SAAA,GAAA,IAAA;AACA,WAAA,kBAAA,GAAA,CAAA;;AAFA,iDAGA,KAAA,aAHA;AAAA;;AAAA;AAGA,4DAAA;AAAA,cAAA,MAAA;AACA,UAAA,WAAA,CAAA,YAAA,CAAA,UAAA,GAAA,CAAA,YAAA,cAAA,MAAA,CAAA,IAAA,MAAA;AACA;AALA;AAAA;AAAA;AAAA;AAAA;AAMA;AAzBA;AAxBA,CAAA","sourcesContent":["<template>\n  <CDropdown in-nav class=\"c-header-nav-items\" add-menu-classes=\"pt-0\">\n    <template #toggler>\n      <CHeaderNavLink>\n        <div class=\"notification\" @click=\"getNotification\">\n          <CIcon size=\"lg\" name=\"cil-bell\" />\n          <span v-if=\"notification_count > 0\" class=\"badge\">{{\n            notification_count\n          }}</span>\n        </div>\n      </CHeaderNavLink>\n    </template>\n    <CDropdownHeader\n      tag=\"div\"\n      class=\"text-center h6 d-flex justify-content-between border-bottom m-0\"\n    >\n      <strong>Notification</strong>\n      <div class=\"mark-notification\" @click=\"markAllReaded\">\n        Mark all as read\n      </div>\n    </CDropdownHeader>\n    <div v-for=\"(notify, index) in notifications\" :key=\"index\">\n      <NotificationItem\n        :notify=\"notify\"\n        :allReaded=\"allReaded\"\n      ></NotificationItem>\n    </div>\n  </CDropdown>\n</template>\n\n<script>\nimport Api from \"@/constants/backendApi\";\nimport UserService from \"../../api/userService\";\nimport NotificationItem from \"@/components/Notification/NotificationItem\";\nexport default {\n  name: \"DropdownNotification\",\n  components: {\n    NotificationItem\n  },\n  data() {\n    return {\n      notification_count: 0,\n      notifications: [],\n      allReaded: false,\n      interval: null\n    };\n  },\n  mounted() {\n    this.getNotificationCount();\n    if (!this.interval) {\n      this.interval = setInterval(this.updateNotification, 10000);\n    }\n  },\n  beforeDestroy() {\n    if (this.interval) {\n      clearInterval(this.interval);\n    }\n  },\n  methods: {\n    async getNotificationCount() {\n      const response = await UserService.getUserBoard(Api.NOTIFICATION_COUNT);\n      this.notification_count = response.data[0].quantity;\n    },\n    async getNotification() {\n      this.notification_count = 0;\n      const response = await UserService.getUserBoard(Api.NOTIFICATION);\n      this.notifications = response.data;\n    },\n    async updateNotification() {\n      if (this.$store.state.auth.status.loggedIn) {\n        const count = await UserService.getUserBoard(Api.NOTIFICATION_COUNT);\n        this.notification_count = count.data[0].quantity;\n        if (this.countNotify > 9) {\n          this.notification_count = \"9+\";\n        }\n      }\n    },\n    markAllReaded() {\n      this.allReaded = true;\n      this.notification_count = 0;\n      for (const notify of this.notifications) {\n        UserService.getUserBoard(`${Api.NOTIFICATION}` + `${notify.slug}/`);\n      }\n    }\n  }\n};\n</script>\n\n<style lang=\"scss\" scoped>\n.c-icon {\n  margin-right: 0.3rem;\n}\n\n.mark-notification {\n  color: #2faff7;\n  &:hover {\n    color: #077cdd;\n  }\n  cursor: pointer;\n}\n.dropdown-menu.show {\n  height: 800px;\n}\n.notification {\n  position: relative;\n  .badge {\n    position: absolute;\n    top: -5px;\n    right: -5px;\n    padding: 2px 2px;\n    border-radius: 50%;\n    background-color: red;\n    color: white;\n  }\n}\n</style>\n"],"sourceRoot":"src/components/Notification"}]}